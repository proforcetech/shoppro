generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// --- Enums ---
//

enum Role {
  ADMIN
  MANAGER
  TECHNICIAN
  ACCOUNTANT
  FRONT_DESK
}

enum InvoiceStatus {
  DRAFT
  APPROVED
  PAID
  PARTIALLY_PAID
  OVERDUE
}

enum EstimateStatus {
  DRAFT
  APPROVED
  REJECTED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  STRIPE
  PAYPAL
  CHECK
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum EntryType {
  DEBIT
  CREDIT
}

//
// --- Users & Auth ---
//

model User {
  id        String   @id @default(uuid())
  firstName String?
  lastName  String?
  phone     String?
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  technician Technician?
  auditLogs  AuditLog[]
}

model Technician {
  id     String        @id @default(uuid())
  userId String        @unique
  user   User          @relation(fields: [userId], references: [id])
  jobs   Appointment[]
}

//
// --- Customer & Vehicle ---
//

model Customer {
  id        String             @id @default(uuid())
  firstName String
  lastName  String?
  email     String
  phone     String
  address   String
  city      String
  state     String
  zip       String
  vehicles  Vehicle[]
  logs      CommunicationLog[]
  createdAt DateTime           @default(now())
  Estimate  Estimate[]
}

model Vehicle {
  id           String           @id @default(uuid())
  vin          String           @unique
  engine       String?
  trim         String?
  drive        String?
  make         String
  model        String
  year         Int
  mileage      Int
  customerId   String
  customer     Customer         @relation(fields: [customerId], references: [id])
  estimates    Estimate[]
  histories    VehicleHistory[]
  appointments Appointment[]
}

model CommunicationLog {
  id         String   @id @default(uuid())
  customerId String
  message    String
  type       String
  createdAt  DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id])
}

model VehicleHistory {
  id        String   @id @default(uuid())
  vehicleId String
  service   String
  date      DateTime
  notes     String?

  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
}

//
// --- Estimates & Invoices ---
//

model Estimate {
  id                   String   @id @default(cuid())
  status               String   @default("DRAFT")
  subTotal             Float
  shopFee              Float?
  hazardousDisposalFee Float?
  isMobile             Boolean  @default(false)
  serviceLocation      String?
  calloutFee           Float?
  mileage              Float?
  mileageRate          Float?
  feeTotal             Float?
  isTaxable            Boolean  @default(true)
  taxRate              Float?
  taxTotal             Float?
  total                Float
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  jobs        Job[]
  customerId  String
  customer    Customer      @relation(fields: [customerId], references: [id])
  vehicleId   String
  vehicle     Vehicle       @relation(fields: [vehicleId], references: [id])
  EstimateJob EstimateJob[]
  Invoice     Invoice?
}

model Job {
  id               String @id @default(cuid())
  laborDescription String
  laborRate        Float
  laborTime        Float

  // Relations
  parts      Part[]
  estimateId String
  estimate   Estimate @relation(fields: [estimateId], references: [id])
}

model Part {
  id           String  @id @default(cuid())
  name         String
  sku          String?
  quantity     Float
  pricePerUnit Float

  // Relations
  jobId    String
  job      Job        @relation(fields: [jobId], references: [id])
  PartItem PartItem[]
}

// New model for storing application settings like tax rates
model Setting {
  id          String  @id @default(cuid())
  key         String  @unique
  value       String
  description String?
}

model EstimateJob {
  id          String @id @default(uuid())
  estimateId  String
  description String
  laborHours  Float
  rate        Float

  estimate Estimate   @relation(fields: [estimateId], references: [id])
  parts    PartItem[]
}

model PartItem {
  id             String @id @default(uuid())
  estimateJobId  String
  partId         String
  qty            Int
  warrantyMonths Int?

  estimateJob     EstimateJob    @relation(fields: [estimateJobId], references: [id])
  part            Part           @relation(fields: [partId], references: [id])
  InventoryPart   InventoryPart? @relation(fields: [inventoryPartId], references: [id])
  inventoryPartId String?
}

model Invoice {
  id         String        @id @default(uuid())
  estimateId String        @unique
  total      Float
  status     InvoiceStatus
  createdAt  DateTime      @default(now())
  payments   Payment[]

  isMobile      Boolean @default(false)
  dispatchFee   Float?  @default(0)
  mileageCharge Float?  @default(0)

  estimate Estimate @relation(fields: [estimateId], references: [id])
}

model Payment {
  id        String        @id @default(uuid())
  invoiceId String
  amount    Float
  method    PaymentMethod
  createdAt DateTime      @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id])
}

//
// --- Inventory & Vendors ---
//

model InventoryPart {
  id          String @id @default(uuid())
  sku         String @unique
  description String
  cost        Float
  price       Float
  qty         Int
  location    String
  vendorId    String

  vendor Vendor     @relation(fields: [vendorId], references: [id])
  items  PartItem[]
}

model Vendor {
  id       String          @id @default(uuid())
  name     String
  contact  String
  leadTime String
  parts    InventoryPart[]
}

//
// --- Accounting ---
//

model Account {
  id      String         @id @default(uuid())
  name    String
  type    AccountType
  balance Float          @default(0)
  entries JournalEntry[]
}

model JournalEntry {
  id          String    @id @default(uuid())
  accountId   String
  account     Account   @relation(fields: [accountId], references: [id])
  amount      Float
  type        EntryType
  description String
  date        DateTime  @default(now())
}

//
// --- Scheduling ---
//

model Appointment {
  id        String   @id @default(uuid())
  vehicleId String
  techId    String
  startTime DateTime
  endTime   DateTime
  type      String
  status    String
  notes     String?

  isMobile    Boolean @default(false)
  dispatchFee Float?  @default(0)
  mileage     Float?  @default(0)

  vehicle    Vehicle    @relation(fields: [vehicleId], references: [id])
  technician Technician @relation(fields: [techId], references: [id])
}

//
// --- Audit Log ---
//

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  entity    String
  entityId  String
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
